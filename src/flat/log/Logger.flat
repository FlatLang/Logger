package flat/log

import flat/io
import flat/datastruct
import flat/time/DateTime
import flat/regex/Pattern

import flat/regex/RegexStringExtensions

import static flat/colorizer/Colorizer

class {
  visible static Int TRACE = 6
  visible static Int DEBUG = 5
  visible static Int INFO = 4
  visible static Int WARN = 3
  visible static Int ERROR = 2
  visible static Int FATAL = 1
  visible static Int OFF = 0

  public var static Int DEFAULT_LOGGING_LEVEL = INFO
  public var static Bool DEFAULT_SHOW_PREFIX = false
  public var static Bool DEFAULT_SHOW_FORMATTING = true
  public var static Int DEFAULT_LINE_LENGTH = null
  public var static Bool DEFAULT_SPLIT_ON_WORD = true
  public var static String DEFAULT_LINE_PREFIX = null
  public var static String DEFAULT_LINE_SUFFIX = null
  public var static String DEFAULT_PREFIX = null
  public var static String DEFAULT_SUFFIX = null
  public var static String DEFAULT_PREFIX_SEPARATOR = " - "

  public var static Int FORCE_LOGGING_LEVEL = null
  public var static Bool FORCE_SHOW_PREFIX = null
  public var static Bool FORCE_SHOW_FORMATTING = null
  public var static Int FORCE_LINE_LENGTH = null
  public var static Bool FORCE_SPLIT_ON_WORD = null
  public var static String FORCE_LINE_PREFIX = null
  public var static String FORCE_LINE_SUFFIX = null
  public var static String FORCE_PREFIX = null
  public var static String FORCE_SUFFIX = null
  public var static String FORCE_PREFIX_SEPARATOR = null

  public var static OutputStream[] defaultTraceStreams = [Console.out]
  public var static OutputStream[] defaultDebugStreams = [Console.out]
  public var static OutputStream[] defaultInfoStreams = [Console.out]
  public var static OutputStream[] defaultWarnStreams = [Console.warn]
  public var static OutputStream[] defaultErrorStreams = [Console.error]
  public var static OutputStream[] defaultFatalStreams = [Console.error]

  [TargetRuntime not browser]
  static {
    if (let level = System.getEnv("LOGGING_DEFAULT_LOGGING_LEVEL")) {
      let levelValue = match (level) {
        "TRACE" => TRACE
        "DEBUG" => DEBUG
        "INFO" => INFO
        "WARN" => WARN
        "ERROR" => ERROR
        "FATAL" => FATAL
      }

      DEFAULT_LOGGING_LEVEL = levelValue
    }
    if (let showPrefix = System.getEnv("LOGGING_DEFAULT_SHOW_PREFIX")) {
      DEFAULT_SHOW_PREFIX = Bool.fromString(showPrefix)
    }
    if (let showFormatting = System.getEnv("LOGGING_DEFAULT_SHOW_FORMATTING")) {
      DEFAULT_SHOW_FORMATTING = Bool.fromString(showFormatting)
    }
    if (let linePrefix = System.getEnv("LOGGING_DEFAULT_LINE_PREFIX")) {
      DEFAULT_LINE_PREFIX = linePrefix
    }
    if (let lineSuffix = System.getEnv("LOGGING_DEFAULT_LINE_SUFFIX")) {
      DEFAULT_LINE_SUFFIX = lineSuffix
    }
    if (let prefix = System.getEnv("LOGGING_DEFAULT_PREFIX")) {
      DEFAULT_PREFIX = prefix
    }
    if (let suffix = System.getEnv("LOGGING_DEFAULT_SUFFIX")) {
      DEFAULT_SUFFIX = suffix
    }
    if (let prefixSeparator = System.getEnv("LOGGING_DEFAULT_PREFIX_SEPARATOR")) {
      DEFAULT_PREFIX_SEPARATOR = prefixSeparator
    }
    if (let forceLevel = System.getEnv("LOGGING_FORCE_LOGGING_LEVEL")) {
      let levelValue = match (forceLevel) {
        "TRACE" => TRACE
        "DEBUG" => DEBUG
        "INFO" => INFO
        "WARN" => WARN
        "ERROR" => ERROR
        "FATAL" => FATAL
      }

      FORCE_LOGGING_LEVEL = levelValue
    }
    if (let forceShowPrefix = System.getEnv("LOGGING_FORCE_SHOW_PREFIX")) {
      FORCE_SHOW_PREFIX = Bool.fromString(forceShowPrefix)
    }
    if (let forceShowFormatting = System.getEnv("LOGGING_FORCE_SHOW_FORMATTING")) {
      FORCE_SHOW_FORMATTING = Bool.fromString(forceShowFormatting)
    }
    if (let forceLinePrefix = System.getEnv("LOGGING_FORCE_LINE_PREFIX")) {
      FORCE_LINE_PREFIX = forceLinePrefix
    }
    if (let forceLineSuffix = System.getEnv("LOGGING_FORCE_LINE_SUFFIX")) {
      FORCE_LINE_SUFFIX = forceLineSuffix
    }
    if (let forcePrefix = System.getEnv("LOGGING_FORCE_PREFIX")) {
      FORCE_PREFIX = forcePrefix
    }
    if (let forceSuffix = System.getEnv("LOGGING_FORCE_SUFFIX")) {
      FORCE_SUFFIX = forceSuffix
    }
    if (let forcePrefixSeparator = System.getEnv("LOGGING_FORCE_PREFIX_SEPARATOR")) {
      FORCE_PREFIX_SEPARATOR = forcePrefixSeparator
    }
  }

  let Int _loggingLevel = null
  visible let Int loggingLevel {
    get {
      return if (FORCE_LOGGING_LEVEL != null) {
        FORCE_LOGGING_LEVEL
      } else if (_loggingLevel != null) {
        _loggingLevel
      } else {
        DEFAULT_LOGGING_LEVEL
      }
    }
  }

  let Bool _showPrefix = null
  visible let Bool showPrefix {
    get {
      return if (FORCE_SHOW_PREFIX != null) {
        FORCE_SHOW_PREFIX
      } else if (_showPrefix != null) {
        _showPrefix
      } else {
        DEFAULT_SHOW_PREFIX
      }
    }
  }

  let Bool _showFormatting = null
  visible let Bool showFormatting {
    get {
      return if (FORCE_SHOW_FORMATTING != null) {
        FORCE_SHOW_FORMATTING
      } else if (_showFormatting != null) {
        _showFormatting
      } else {
        DEFAULT_SHOW_FORMATTING
      }
    }
  }

  let Int _lineLength = null
  visible let Int lineLength {
    get {
      return if (FORCE_LINE_LENGTH != null) {
        FORCE_LINE_LENGTH
      } else if (_lineLength != null) {
        _lineLength
      } else {
        DEFAULT_LINE_LENGTH
      }
    }
  }

  let String _linePrefix = null
  visible let String linePrefix {
    get {
      return if (FORCE_LINE_PREFIX != null) {
        FORCE_LINE_PREFIX
      } else if (_linePrefix != null) {
        _linePrefix
      } else {
        DEFAULT_LINE_PREFIX
      }
    }
  }

  let String _lineSuffix = null
  visible let String lineSuffix {
    get {
      return if (FORCE_LINE_SUFFIX != null) {
        FORCE_LINE_SUFFIX
      } else if (_lineSuffix != null) {
        _lineSuffix
      } else {
        DEFAULT_LINE_SUFFIX
      }
    }
  }

  let String _prefix = null
  visible let String prefix {
    get {
      return if (FORCE_PREFIX != null) {
        FORCE_PREFIX
      } else if (_prefix != null) {
        _prefix
      } else {
        DEFAULT_PREFIX
      }
    }
  }

  let String _suffix = null
  visible let String suffix {
    get {
      return if (FORCE_SUFFIX != null) {
        FORCE_SUFFIX
      } else if (_suffix != null) {
        _suffix
      } else {
        DEFAULT_SUFFIX
      }
    }
  }

  let String _prefixSeparator = null
  visible let String prefixSeparator {
    get {
      return if (FORCE_PREFIX_SEPARATOR != null) {
        FORCE_PREFIX_SEPARATOR
      } else if (_prefixSeparator != null) {
        _prefixSeparator
      } else {
        DEFAULT_PREFIX_SEPARATOR
      }
    }
  }

  let Bool _splitOnWord = null
  visible let Bool splitOnWord {
    get {
      return if (FORCE_SPLIT_ON_WORD != null) {
        FORCE_SPLIT_ON_WORD
      } else if (_splitOnWord != null) {
        _splitOnWord
      } else {
        DEFAULT_SPLIT_ON_WORD
      }
    }
  }

  Array<filter(String) -> String> filters = Array()

  static var Long currentDisabledLoggersModificationId = 0
  var Long lastDisabledLoggersModificationId = 0

  var Bool _disabled = false
  visible Bool disabled {
    get {
      if (lastDisabledLoggersModificationId == currentDisabledLoggersModificationId) return _disabled

      if (isClassDisabled(loggerClass)) {
        _disabled = true
      } else if (isLabelDisabled(label)) {
        _disabled = true
      } else {
        _disabled = false
      }

      lastDisabledLoggersModificationId = currentDisabledLoggersModificationId

      return _disabled
    }
  }

  static var HashSet<Class> disabledClasses = HashSet()
  static var String[] disabledLabels = String[]
  static var String[] disabledWildcardLabels = String[]

  public construct(
    private Class loggerClass = null,
    private String: label = null,
    Int: loggingLevel = null,
    Bool: showPrefix = null,
    Bool: showFormatting = null,
    Int: lineLength = null,
    Bool: splitOnWord = null,
    OutputStream: stream = null,
    OutputStream[]: streams = null,
    public var OutputStream[]: traceStreams = null,
    public var OutputStream[]: debugStreams = null,
    public var OutputStream[]: infoStreams = null,
    public var OutputStream[]: warnStreams = null,
    public var OutputStream[]: errorStreams = null,
    public var OutputStream[]: fatalStreams = null
  ) {
    if (stream) {
      this.traceStreams = [stream]
      this.debugStreams = [stream]
      this.infoStreams = [stream]
      this.warnStreams = [stream]
      this.errorStreams = [stream]
      this.fatalStreams = [stream]
    } else if (streams) {
      this.traceStreams = streams
      this.debugStreams = streams
      this.infoStreams = streams
      this.warnStreams = streams
      this.errorStreams = streams
      this.fatalStreams = streams
    } else {
      this.traceStreams = traceStreams ?: defaultTraceStreams
      this.debugStreams = debugStreams ?: defaultDebugStreams
      this.infoStreams = infoStreams ?: defaultInfoStreams
      this.warnStreams = warnStreams ?: defaultWarnStreams
      this.errorStreams = errorStreams ?: defaultErrorStreams
      this.fatalStreams = fatalStreams ?: defaultFatalStreams
    }

    _loggingLevel = loggingLevel
    _showPrefix = showPrefix
    _showFormatting = showFormatting
    _lineLength = lineLength
    _splitOnWord = splitOnWord
  }

  public static enableAllLogs() {
    disabledClasses = HashSet()
    disabledLabels = String[]
    disabledWildcardLabels = String[]
  }

  public static disableLogs(Class c) {
    disabledClasses.add(c)

    currentDisabledLoggersModificationId++
  }

  public static enableLogs(Class c) {
    disabledClasses.remove(c)

    currentDisabledLoggersModificationId++
  }

  public static disableLogs(String label) {
    if (label.contains('*')) {
      disabledWildcardLabels.add(label)
    } else {
      disabledLabels.add(label)
    }

    currentDisabledLoggersModificationId++
  }

  public static enableLogs(String label) {
    if (label.contains('*')) {
      disabledWildcardLabels.remove(label)
    } else {
      disabledLabels.remove(label)
    }

    currentDisabledLoggersModificationId++
  }

  static isClassDisabled(Class c) => false {
    if (!c) return false

    if (disabledClasses.contains(c)) return true

    return isLabelDisabled(c.location)
  }

  static isLabelDisabled(String label) => false {
    if (!label) return false

    if (disabledLabels.contains(label)) return true
    if (disabledWildcardLabels.any({ isWildcardMatch(label, _) })) return true
  }

  static isWildcardMatch(String value, String wildcard) => true {
    var Int valueIndex = 0
    var Int wildcardIndex = 0
    var Int i = wildcard.indexOf('*')

    while (i != -1) {
      if (!searchInnerWildcardMatch(value, wildcard, valueIndex, wildcardIndex, i)) return false

      wildcardIndex = i + 1

      // Skip grouped wildcard symbols
      while (++i < wildcard.count && wildcard[i] == '*') {
        wildcardIndex++
      }

      i = wildcard.indexOf('*', i)

      if (i == -1 && wildcardIndex == wildcard.count) return true

      valueIndex = findInnerWildcardMatch(value, wildcard, valueIndex, wildcardIndex, i == -1 ? wildcard.count : i)

      if (i == -1) return valueIndex != -1
      if (valueIndex == -1) return false
    }
  }

  static searchInnerWildcardMatch(
    String value,
    String wildcard,
    var Int valueIndex,
    var Int wildcardIndex,
    Int stopIndex
  ) => true {
    while (wildcardIndex < stopIndex) {
      if (valueIndex >= value.count) return false
      if (value[valueIndex++] != wildcard[wildcardIndex++]) return false
    }
  }

  static findInnerWildcardMatch(
    String value,
    String wildcard,
    Int valueStartIndex,
    Int wildcardStartIndex,
    Int stopIndex
  ) -> Int => -1 {
    var Int wildcardIndex = wildcardStartIndex
    var Int currentStartIndex = valueStartIndex
    var Int currentIndex = currentStartIndex

    while (currentIndex < value.count) {
      if (value[currentIndex++] != wildcard[wildcardIndex++]) {
        currentStartIndex = currentIndex
        wildcardIndex = wildcardStartIndex
        continue
      }
      if (currentStartIndex == valueStartIndex) continue
      if (wildcardIndex == stopIndex) return currentStartIndex
    }
  }

  getPrefix(Int level) -> String {
    if (!showPrefix) {
      return ""
    }

    let levelString = match (level) {
      TRACE => "TRACE"
      DEBUG => "DEBUG"
      INFO => "INFO"
      WARN => "WARN"
      ERROR => "ERROR"
      FATAL => "FATAL"
    }

    let timestamp = DateTime.now().toIsoString()
    let classPrefix = loggerClass ? loggerClass.location + " " : ""
    let labelPrefix = label ? label + " " : ""

    let suffix = " #{classPrefix}#{labelPrefix}".trimEnd()
    let content = "[#{timestamp}] [#{levelString}]" + suffix

    return if (showFormatting) {
      let colored = match (level) {
        TRACE => cyanBackground(content)
        DEBUG => greenBackground(content)
        INFO => grayBackground(content)
        WARN => yellowBackground(content)
        ERROR => redBackground(content)
        FATAL => redBackground(content)
      }

      colored + prefixSeparator
    } else {
      content + prefixSeparator
    }
  }

  public addFilter(filter(String) -> String) {
    filters.add(filter)
  }

  formatContent(var String content, Int level) -> String {
    filters.forEach({ content = (String)_(content) })

    if (_lineLength != null) {
      content = content
        .split(/\n/)
        .map((line) => {
          let trimmedLines = Array<String>()

          var i = 0

          while (i < line.count) {
            if (i + lineLength >= line.count) {
              trimmedLines.add(line.substring(i).trimEnd())
              break
            }

            let splitIndex = splitOnWord ?
              line.lastIndexOf(String.WHITESPACE, start: i + lineLength) + 1 :
              i + lineLength

            let trimmedLine = line.substring(i, splitIndex).trimEnd()

            trimmedLines.add(trimmedLine)

            i = splitIndex
          }

          return trimmedLines
        })
        .map({ "#{_.join("\n")}" })
        .join("\n")
    }

    if (!showFormatting) {
      return content
    }

    let formatted = match (level) {
      TRACE => cyan(content)
      DEBUG => green(content)
      INFO => content
      WARN => yellow(content)
      ERROR => red(content)
      FATAL => red(content)
    }

    return formatted
  }

  addLinePrefix(String content) => content {
    if (linePrefix) {
      native var Char[] data

      external {
        #{data} = #{linePrefix.chars.data} + #{content.chars.data}.replaceAll("\n", "\n" + #{linePrefix.chars.data});
      }

      return String(data)
    }
  }

  addLineSuffix(String content) => content {
    if (lineSuffix) {
      native var Char[] data

      external {
        #{data} = #{content.chars.data}.replaceAll("\n", #{linePrefix.chars.data} + "\n") + #{lineSuffix.chars.data};
      }

      return String(data)
    }
  }

  addPrefix(String content) => content {
    if (prefix) {
      return prefix + content
    }
  }

  addSuffix(String content) => content {
    if (suffix) {
      return content + suffix
    }
  }

  formatMessage(String message) -> String {
    return addSuffix(addPrefix(addLineSuffix(addLinePrefix(message))))
  }

  public static increaseTab(Int tabCount = 1, String tab = "  ") {
    if (!DEFAULT_LINE_PREFIX) DEFAULT_LINE_PREFIX = ""

    DEFAULT_LINE_PREFIX += tab.repeat(tabCount)
  }

  public static decreaseTab(Int tabCount = 1, String tab = "  ") {
    if (!DEFAULT_LINE_PREFIX) return

    DEFAULT_LINE_PREFIX = DEFAULT_LINE_PREFIX.trimEnd(count: tab.count * tabCount)

    if (DEFAULT_LINE_PREFIX.count == 0) {
      DEFAULT_LINE_PREFIX = null
    }
  }

  public static indent<Out>(func() -> Out, Int tabCount = 1, String tab = "  ") -> Out {
    increaseTab(tabCount, tab)
    let value = func()
    decreaseTab(tabCount, tab)

    return value
  }

  writeMessage(OutputStream[] streams, String message, Bool newLine) {
    if (newLine) {
      streams.forEach({ _.writeLine(message) })
    } else {
      streams.forEach({ _.write(message) })
    }
  }

  public trace(value() -> Object, Bool: newLine = true) {
    if (loggingLevel >= TRACE && !disabled) {
      writeMessage(
        traceStreams,
        formatMessage(getPrefix(TRACE) + formatContent(value().toString(), TRACE)),
        newLine
      )
    }
  }

  public trace(lazy Object value, Bool: newLine = true) {
    if (loggingLevel >= TRACE && !disabled) {
      writeMessage(
        traceStreams,
        formatMessage(getPrefix(TRACE) + formatContent(value.toString(), TRACE)),
        newLine
      )
    }
  }

  public debug(value() -> Object, Bool: newLine = true) {
    if (loggingLevel >= DEBUG && !disabled) {
      writeMessage(
        debugStreams,
        formatMessage(getPrefix(DEBUG) + formatContent(value().toString(), DEBUG)),
        newLine
      )
    }
  }

  public debug(lazy Object value, Bool: newLine = true) {
    if (loggingLevel >= DEBUG && !disabled) {
      writeMessage(
        debugStreams,
        formatMessage(getPrefix(DEBUG) + formatContent(value.toString(), DEBUG)),
        newLine
      )
    }
  }

  public info(value() -> Object, Bool: newLine = true) {
    if (loggingLevel >= INFO && !disabled) {
      writeMessage(
        infoStreams,
        formatMessage(getPrefix(INFO) + formatContent(value().toString(), INFO)),
        newLine
      )
    }
  }

  public info(lazy Object value, Bool: newLine = true) {
    if (loggingLevel >= INFO && !disabled) {
      writeMessage(
        infoStreams,
        formatMessage(getPrefix(INFO) + formatContent(value.toString(), INFO)),
        newLine
      )
    }
  }

  public warn(value() -> Object, Bool: newLine = true) {
    if (loggingLevel >= WARN && !disabled) {
      writeMessage(
        warnStreams,
        formatMessage(getPrefix(WARN) + formatContent(value().toString(), WARN)),
        newLine
      )
    }
  }

  public warn(lazy Object value, Bool: newLine = true) {
    if (loggingLevel >= WARN && !disabled) {
      writeMessage(
        warnStreams,
        formatMessage(getPrefix(WARN) + formatContent(value.toString(), WARN)),
        newLine
      )
    }
  }

  public error(value() -> Object, Bool: newLine = true) {
    if (loggingLevel >= ERROR && !disabled) {
      writeMessage(
        errorStreams,
        formatMessage(getPrefix(ERROR) + formatContent(value().toString(), ERROR)),
        newLine
      )
    }
  }

  public error(lazy Object value, Bool: newLine = true) {
    if (loggingLevel >= ERROR && !disabled) {
      writeMessage(
        errorStreams,
        formatMessage(getPrefix(ERROR) + formatContent(value.toString(), ERROR)),
        newLine
      )
    }
  }

  public fatal(value() -> Object, Bool: newLine = true) {
    if (loggingLevel >= FATAL && !disabled) {
      writeMessage(
        fatalStreams,
        formatMessage(getPrefix(FATAL) + formatContent(value().toString(), FATAL)),
        newLine
      )
    }
  }

  public fatal(lazy Object value, Bool: newLine = true) {
    if (loggingLevel >= FATAL && !disabled) {
      writeMessage(
        fatalStreams,
        formatMessage(getPrefix(FATAL) + formatContent(value.toString(), FATAL)),
        newLine
      )
    }
  }
}